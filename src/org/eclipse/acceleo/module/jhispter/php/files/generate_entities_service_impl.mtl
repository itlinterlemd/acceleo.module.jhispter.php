[comment encoding = UTF-8 /]
[module generate_entities_service_impl('http://www.github.io/jhipster/jdl/JDL')]
[import org::eclipse::acceleo::module::jhispter::php::services::utilsservices]

[template public generateEntityServiceImpl(aJdlEntity : JdlEntity)]
[file (aJdlEntity.name.getFileNameServiceImpl(), false, 'UTF-8')]
<?php

declare(strict_types=1);

namespace Interlemd\Services\[aJdlEntity.name/];

//use Interlemd\Domain\Entities;
use Interlemd\Domain\Entities\[aJdlEntity.name/];
use Interlemd\Application\Exceptions\ValidationException;
use Interlemd\Domain\Exceptions\PersistenceException;
use Interlemd\Domain\Exceptions\EntityNotFoundException;
use Interlemd\Services\[aJdlEntity.name/]\[aJdlEntity.name/]Service;
use Interlemd\Services\GeneralServiceAbstract;
use Doctrine\ORM\EntityManager;
use Exception;
class [aJdlEntity.name/]ServiceImpl extends GeneralServiceAbstract implements [aJdlEntity.name/]Service
{
    private $entityManager;
	protected $[aJdlEntity.name.toLowerFirst()/]Repository;

    public function __construct(EntityManager $entityManager)
    {
        $this->entityManager = $entityManager;
		$this->[aJdlEntity.name.toLowerFirst()/]Repository = $entityManager->getRepository([aJdlEntity.name/]::class);
    }


    public function findAll(): array
    {
        return  $this->[aJdlEntity.name.toLowerFirst()/]Repository
        ->findAll();//array_values($this->[aJdlEntity.name.toLowerFirst()/]s);
    }

    /**
     * {@inheritdoc}
     */
    public function find[aJdlEntity.name/]OfId(int $id): [aJdlEntity.name/]
    {
        $[aJdlEntity.name.toLowerFirst()/]  = $this->[aJdlEntity.name.toLowerFirst()/]Repository
        ->findOneBy(array('id' => $id));
        if (!isset($[aJdlEntity.name.toLowerFirst()/])) {
            throw new EntityNotFoundException();
        }
        return  $[aJdlEntity.name.toLowerFirst()/];
    }
	
	/**
	 * @param [aJdlEntity.name/] $[aJdlEntity.name.toLowerFirst()/]
	 * @return [aJdlEntity.name/]
	 */
	public function save([aJdlEntity.name/] $[aJdlEntity.name.toLowerFirst()/]): [aJdlEntity.name/] {
        try {
            
            $this->entityManager->persist($[aJdlEntity.name.toLowerFirst()/]);
            $this->entityManager->flush();
            return $[aJdlEntity.name.toLowerFirst()/];
        }
        catch (Exception $e)
        {
       
            throw new PersistenceException($e->getMessage());
        }
	}


 /**
     * @param object $[aJdlEntity.name.toLowerFirst()/]JSON
     * @return @return [aJdlEntity.name/]
     * @throws PersistenceException
     */
    public function saveFromJson(object $[aJdlEntity.name.toLowerFirst()/]JSON): [aJdlEntity.name/] {
        try {

            //TODO: make validations
    
            $[aJdlEntity.name.toLowerFirst()/] = new [aJdlEntity.name/]($[aJdlEntity.name.toLowerFirst()/]JSON->id,
        [aJdlEntity.getConstructorArgsAction()/]
        );
            return $this->save($[aJdlEntity.name.toLowerFirst()/]);
        }
        catch (Exception $e)
        {
       
            throw new PersistenceException($e->getMessage());
        }
	}
	
	/**
	 *
	 * @param [aJdlEntity.name/] $[aJdlEntity.name.toLowerFirst()/]
	 * @return [aJdlEntity.name/]
	 */
	public function update([aJdlEntity.name/] $[aJdlEntity.name.toLowerFirst()/]): [aJdlEntity.name/] {
        try {
            
             $this->entityManager->persist($[aJdlEntity.name.toLowerFirst()/]);
             $this->entityManager->flush();
             return $[aJdlEntity.name.toLowerFirst()/];
         }
         catch (Exception $e)
         {
             $message = "Error guardando [aJdlEntity.name.toLowerFirst()/]:". $[aJdlEntity.name.toLowerFirst()/]->getId();
             throw new PersistenceException($message);
         }
       
	}

 /**
     * @param object $[aJdlEntity.name.toLowerFirst()/]JSON
     * @return [aJdlEntity.name/]
     * @throws PersistenceException
     */
    public function updateFromJson(object $[aJdlEntity.name.toLowerFirst()/]JSON, int $[aJdlEntity.name.toLowerFirst()/]Id): [aJdlEntity.name/] {
        try {

            $[aJdlEntity.name.toLowerFirst()/]Update = $this->find[aJdlEntity.name/]OfId($[aJdlEntity.name.toLowerFirst()/]Id);
	           
				if (!isset($[aJdlEntity.name.toLowerFirst()/]Update)) {
				      throw new ValidationException("[aJdlEntity.name.toLowerFirst()/].messages.error.[aJdlEntity.name.toLowerFirst()/]notexist", "[aJdlEntity.name/] no existe:".$[aJdlEntity.name.toLowerFirst()/]Id );
				            }
			//TODO: make validations
			[for (aEntityField : JdlEntityField | aJdlEntity.fieldDefinition.fields)]
			$[aJdlEntity.name.toLowerFirst()/]Update->[aEntityField.name/]=$[aJdlEntity.name.toLowerFirst()/]JSON->[aEntityField.name/];
			[/for]

            return $this->update($[aJdlEntity.name.toLowerFirst()/]Update);
        }
        catch (Exception $e)
        {
       
            throw new PersistenceException($e->getMessage());
        }
	}


	
	/**
	 *
	 * @param int $[aJdlEntity.name.toLowerFirst()/]Id
	 * @return bool
	 */
	public function delete(int $[aJdlEntity.name.toLowerFirst()/]Id): bool {

        try {
            $entity = $this->entityManager->getPartialReference("[aJdlEntity.name/]", $[aJdlEntity.name.toLowerFirst()/]Id);
            $this->entityManager-> remove($entity);
            $this->entityManager->flush();
            return true;
        }
        catch (Exception $e)
        {
            $message = "Error borrando [aJdlEntity.name.toLowerFirst()/]:". $[aJdlEntity.name.toLowerFirst()/]Id;
            throw new PersistenceException($message);
        }
	}

    public function findByFilter($filters)
    {
        return $this->getAllResultsByFilter($this->entityManager, $this->[aJdlEntity.name.toLowerFirst()/]Repository, $filters);
    }

    
    public function findByAttribute($attribute, $value, $operator = '=')
    {
        return $this->getAllByAttribute($this->entityManager, $this->[aJdlEntity.name.toLowerFirst()/]Repository, $attribute, $value, $operator);
    }

    public function findAllByPaginatedFilter($page, $perPage, array $filters)
    {

    return $this->getAllByPaginatedFilter($this->entityManager, $this->[aJdlEntity.name.toLowerFirst()/]Repository, $page, $perPage, $filters);
    }


	
}

[/file]
[/template]

[query public getFileNameServiceImpl(name : String) : String =
	'src\\Services\\'+ name.toUpperFirst()+'\\'+name.concat('ServiceImpl.php')
	/]




